@using SmartSchool.Web.Components.Layout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims


@page "/login"
@layout AuthLayout
@attribute [AllowAnonymous]

@inject NavigationManager navigation
@inject UserManager<IdentityUser> userManager
@inject IUserStore<IdentityUser> userStore
@inject RoleManager<IdentityRole> roleManager
@inject SignInManager<IdentityUser> signInManager

<EditForm method="post" Model="LoginForm" OnValidSubmit="PerformLogin" FormName="login"
          style="margin-top:-10px">
    <hr />
    <div class="form-outline">
        <label for="email" class="form-label">Email:</label>
        <InputText @bind-Value="LoginForm.Email" required placeholder="user@example.com"
                   class="form-control" />
    </div>
    <div class="form-outline">
        <label for="password" class="form-label">Email:</label>
        <InputText type="password" @bind-Value="LoginForm.Password" class="form-control" />
    </div>
    <div class="form-check mt-1">
        <InputCheckbox class="form-check-input" id="flexCheckDefault" @bind-Value="LoginForm.Register"></InputCheckbox>
        <label class="form-check-label" for="flexCheckDefault">
            Register?
        </label>
    </div>
    <div class="text-center pt-1 mb-5 pb-1">
        <button class="btn btn-primary btn-block fa-lg gradient-custom-2 mb-3" type="submit">Login</button>
    </div>

</EditForm>

@code {
    [SupplyParameterFromForm]
    private LoginModel LoginForm { get; set; } = new();
    private const string roleName = "Superadmin";

    public async Task PerformLogin()
    {
        if (LoginForm.Register)
            await Register();

        await signInManager.PasswordSignInAsync(LoginForm.Email, LoginForm.Password, true, false);

        navigation.NavigateTo("/");
    }

    private async Task Register()
    {
        var identity = new IdentityUser();
        await userManager.SetUserNameAsync(identity, LoginForm.Email);

        var emailStore = (IUserEmailStore<IdentityUser>)userStore;
        await emailStore.SetEmailAsync(identity, LoginForm.Email, CancellationToken.None);

        await userManager.CreateAsync(identity, LoginForm.Password);

        List<Claim> claims =
        [
            new("firstName", "Dan"), new("lastName", "Patrascu")
        ];

        await userManager.AddClaimsAsync(identity, claims);

        var superAdminRole = roleManager.Roles.FirstOrDefault(x => x.Name == roleName);
        if (superAdminRole is null)
        {
            superAdminRole = new IdentityRole(roleName);
            await roleManager.CreateAsync(superAdminRole);
        }

        await userManager.AddToRoleAsync(identity, roleName);
    }

    private class LoginModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        public bool Register { get; set; } = false;
    }
}
